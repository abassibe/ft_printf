chk_color.c:			lst->str = ft_strdup(set_tab_two(i));
chk_color.c:			lst->len_str_conv = (int)ft_strlen(set_tab_two(i));
chk_color.c:			lst->conv = ft_strdup(str);
chk_color.c:			lst->ind_cut = ind;
chk_color.c:			lst->bool_star = 1;
chk_color.c:	while (lst->fmt[i++] && lst->fmt[j++])
chk_color.c:		if (lst->fmt[i] == '{')
chk_color.c:			while (lst->fmt[j] && lst->fmt[j] != '}' && c < 10)
chk_color.c:				tmp[c++] = lst->fmt[j++];
chk_color.c:			tmp[c++] = lst->fmt[j++];
chk_color.c:	if (lst->bool_star == 1)
chk_color.c:		lst->len_ret += j;
concaten_result.c:	len_conv = (int)ft_strlen(lst->conv);
concaten_result.c:	tmp = str_cut(lst->fmt, lst->ind_cut);
concaten_result.c:	tmp = str_join(tmp, lst->str, lst->ind_cut, lst->len_str_conv);
concaten_result.c:	i = lst->ind_cut + lst->len_str_conv;
concaten_result.c:	lst->fmt = str_join_fin(tmp, lst->fmt, i, lst->ind_cut + len_conv + 1);
concaten_result.c:	lst->len_ret = lst->ind_cut + lst->len_str_conv;
conv_bin.c:	lst->l_int = va_arg(ap, long);
conv_bin.c:	lst->str_nb = ft_itoa_base(lst->l_int, 2);
conv_bin.c:	lst->len_str_conv = (int)ft_strlen(lst->str_nb);
conv_bin.c:	lst->len_str = lst->long_preci;
conv_bin.c:	if (lst->len_str < lst->long_opt)
conv_bin.c:		lst->len_str = lst->long_opt;
conv_bin.c:	lst->str = ft_strnew(lst->len_str + 1);
conv_char.c:	if (lst->less == 1)
conv_char.c:		lst->str[i++] = lst->c;
conv_char.c:		while (i < lst->len_str_conv)
conv_char.c:			lst->str[i++] = ' ';
conv_char.c:	else if (lst->zero == 1)
conv_char.c:		while (i < lst->len_str_conv - 1)
conv_char.c:			lst->str[i++] = '0';
conv_char.c:		lst->str[i] = lst->c;
conv_char.c:		while (i < lst->len_str_conv - 1)
conv_char.c:			lst->str[i++] = ' ';
conv_char.c:		lst->str[i] = lst->c;
conv_char.c:	if (lst->uni_c <= 127)
conv_char.c:		lst->c = lst->uni_c;
conv_char.c:		tmp = ft_itoa_base_unicode(lst->uni_c, 2);
conv_char.c:	lst->tab = (int *)malloc(6);
conv_char.c:		lst->str[c++] = ft_btoi(tmp);
conv_char.c:		lst->len_str_conv++;
conv_char.c:	lst->len_str_conv--;
conv_char.c:	if (lst->l == 1 && MB_CUR_MAX > 1)
conv_char.c:		lst->uni_c = va_arg(ap, wchar_t);
conv_char.c:		lst->c = va_arg(ap, int);
conv_char.c:	lst->conv_c = 1;
conv_char.c:	lst->len_str_conv = 1;
conv_char.c:	if (lst->len_str_conv < lst->long_opt)
conv_char.c:		lst->len_str_conv = lst->long_opt;
conv_char.c:	lst->str = ft_strnew(lst->len_str_conv);
conv_char.c:	if (lst->l == 1 && MB_CUR_MAX > 1)
conv_empty.c:	lst->len_str_conv = 1;
conv_empty.c:	if (lst->long_opt > lst->len_str_conv)
conv_empty.c:		lst->len_str_conv = lst->long_opt;
conv_empty.c:	lst->str = ft_strnew(lst->len_str_conv);
conv_empty.c:	if (lst->less == 1)
conv_empty.c:		lst->str[i++] = c;
conv_empty.c:		while (i < lst->long_opt)
conv_empty.c:			lst->str[i++] = ' ';
conv_empty.c:	else if (lst->zero == 1)
conv_empty.c:		while (i < lst->long_opt - 1)
conv_empty.c:			lst->str[i++] = '0';
conv_empty.c:		lst->str[i] = c;
conv_empty.c:		while (i < lst->long_opt - 1)
conv_empty.c:			lst->str[i++] = ' ';
conv_empty.c:		lst->str[i] = c;
conv_hexa.c:	tmp = ft_strnew(lst->len_str);
conv_hexa.c:	while (j < lst->len_str_conv + 2)
conv_hexa.c:		tmp[i++] = lst->str_nb[j++];
conv_hexa.c:	while (i < lst->len_str)
conv_hexa.c:	lst->str_nb = tmp;
conv_hexa.c:	tmp = ft_strnew(lst->len_str);
conv_hexa.c:	while (i < lst->len_str + 2)
conv_hexa.c:		if (i < lst->len_str - ((int)ft_strlen(lst->str_nb)))
conv_hexa.c:			tmp[i++] = lst->str_nb[j++];
conv_hexa.c:	lst->str_nb = tmp;
conv_hexa.c:	if (lst->long_preci == -1 &&
conv_hexa.c:			(lst->long_opt > lst->len_str_conv && lst->zero == 1))
conv_hexa.c:		lst->len_str_conv = lst->long_opt - 2;
conv_hexa.c:	if (lst->long_preci == 0 && lst->l_hexa == 0)
conv_hexa.c:		lst->str_nb = ft_strnew(0);
conv_hexa.c:		tmp = ft_strnew(lst->len_str_conv);
conv_hexa.c:	while (i < lst->len_str_conv)
conv_hexa.c:		if (i < (lst->len_str_conv - (int)ft_strlen(lst->str_nb)))
conv_hexa.c:			tmp[i++] = lst->str_nb[j++];
conv_hexa.c:	lst->str_nb = tmp;
conv_hexa.c:	lst->l_hexa = va_arg(ap, long long);
conv_hexa.c:	lst->str_nb = ft_itoa_base(lst->l_hexa, 16);
conv_hexa.c:	lst->len_str_conv = ft_strlen(lst->str_nb);
conv_hexa.c:	if (lst->long_preci > lst->len_str_conv)
conv_hexa.c:		lst->len_str_conv = lst->long_preci;
conv_hexa.c:	lst->len_str = lst->len_str_conv;
conv_hexa.c:	if (lst->long_opt > lst->len_str)
conv_hexa.c:		lst->len_str = lst->long_opt;
conv_hexa.c:	lst->str_nb = ft_strjoinfn("0x", lst->str_nb);
conv_hexa.c:	if (lst->less == 1)
conv_hexa.c:	lst->str = lst->str_nb;
conv_hexa.c:	lst->len_str_conv = (int)ft_strlen(lst->str);
conv_hexa.c:	if (lst->l_hexa == 0 && lst->long_preci > 0)
conv_hexa.c:		lst->len_str_conv--;
conv_hexa_x.c:	if (lst->long_opt == 0 && lst->long_preci == 0 && lst->l_hexa == 0)
conv_hexa_x.c:	tmp = ft_strnew(lst->len_str);
conv_hexa_x.c:	if (lst->long_opt > lenght && lst->long_opt > lst->long_preci &&
conv_hexa_x.c:			(lst->zero == 1 && lst->diez == 1))
conv_hexa_x.c:		lst->len_str -= 2;
conv_hexa_x.c:	while (i < lst->len_str + 2)
conv_hexa_x.c:		if (i < lst->len_str - ((int)ft_strlen(lst->str_nb)))
conv_hexa_x.c:			tmp[i++] = lst->str_nb[j++];
conv_hexa_x.c:	lst->str_nb = tmp;
conv_hexa_x.c:	if (lst->diez == 1)
conv_hexa_x.c:		lst->len_str_conv += 2;
conv_hexa_x.c:	tmp = ft_strnew(lst->len_str);
conv_hexa_x.c:	while (j < lst->len_str_conv)
conv_hexa_x.c:		tmp[i++] = lst->str_nb[j++];
conv_hexa_x.c:	while (i < lst->len_str)
conv_hexa_x.c:	lst->str_nb = tmp;
conv_hexa_x.c:	tmp = ft_strnew(lst->len_str);
conv_hexa_x.c:	if (lst->long_opt == 0)
conv_hexa_x.c:	while (i < lst->len_str)
conv_hexa_x.c:		if (i < lst->len_str - ((int)ft_strlen(lst->str_nb)))
conv_hexa_x.c:			tmp[i++] = lst->str_nb[j++];
conv_hexa_x.c:	lst->str_nb = tmp;
conv_hexa_x.c:	if (lst->long_preci == -1 &&
conv_hexa_x.c:			(lst->long_opt > lst->len_str_conv && lst->zero == 1))
conv_hexa_x.c:		lst->len_str_conv = lst->long_opt;
conv_hexa_x.c:	if (lst->long_preci == 0 && lst->l_hexa == 0)
conv_hexa_x.c:		lst->str_nb = ft_strnew(0);
conv_hexa_x.c:		tmp = ft_strnew(lst->len_str_conv);
conv_hexa_x.c:	while (i < lst->len_str_conv)
conv_hexa_x.c:		if (i < (lst->len_str_conv - (int)ft_strlen(lst->str_nb)))
conv_hexa_x.c:			tmp[i++] = lst->str_nb[j++];
conv_hexa_x.c:	lst->str_nb = tmp;
conv_hexa_x.c:	lenght = lst->len_str_conv;
conv_hexa_x.c:	lst->len_str_conv = ft_strlen(lst->str_nb);
conv_hexa_x.c:	if (lst->long_preci > lst->len_str_conv)
conv_hexa_x.c:		lst->len_str_conv = lst->long_preci;
conv_hexa_x.c:	lst->len_str = lst->len_str_conv;
conv_hexa_x.c:	if (lst->long_opt > lst->len_str)
conv_hexa_x.c:		lst->len_str = lst->long_opt;
conv_hexa_x.c:	if (lst->diez == 1 && lst->l_hexa != 0)
conv_hexa_x.c:		lst->str_nb = ft_strjoinfn("0x", lst->str_nb);
conv_hexa_x.c:	lst->str = ft_strnew(lst->len_str);
conv_hexa_x.c:	if (lst->less == 1)
conv_hexa_x.c:	else if (lst->diez == 1)
conv_hexa_x.c:	lst->str = ft_strdup(lst->str_nb);
conv_hexa_x.c:	lst->len_str_conv = (int)ft_strlen(lst->str);
conv_octal.c:	tmp = ft_strnew(lst->len_str);
conv_octal.c:	while (j < lst->len_str_conv)
conv_octal.c:		tmp[i++] = lst->str_nb[j++];
conv_octal.c:	while (i < lst->len_str)
conv_octal.c:	lst->str_nb = tmp;
conv_octal.c:	tmp = ft_strnew(lst->len_str);
conv_octal.c:	while (i < lst->len_str + 2)
conv_octal.c:		if (i < lst->len_str - ((int)ft_strlen(lst->str_nb)))
conv_octal.c:			tmp[i++] = lst->str_nb[j++];
conv_octal.c:	lst->str_nb = tmp;
conv_octal.c:	if (lst->long_preci == 0 && lst->str_nb[0] == '0' && lst->diez != 1)
conv_octal.c:		lst->str_nb = ft_strnew(0);
conv_octal.c:		if (lst->long_opt == 0)
conv_octal.c:			lst->len_str = 0;
conv_octal.c:	if (lst->long_preci == -1 &&
conv_octal.c:			(lst->long_opt > lst->len_str_conv && lst->zero == 1))
conv_octal.c:		lst->len_str_conv = lst->long_opt;
conv_octal.c:	tmp = ft_strnew(lst->len_str_conv);
conv_octal.c:	while (i < lst->len_str_conv)
conv_octal.c:		if (i < (lst->len_str_conv - (int)ft_strlen(lst->str_nb)))
conv_octal.c:			tmp[i++] = lst->str_nb[j++];
conv_octal.c:	lst->str_nb = tmp;
conv_octal.c:	if (lst->l == 1 || lst->ll == 1)
conv_octal.c:		lst->l_int = va_arg(ap, long);
conv_octal.c:		lst->usll_int = lst->l_int;
conv_octal.c:	else if (lst->hh == 1)
conv_octal.c:		lst->us_c = va_arg(ap, int);
conv_octal.c:		lst->usll_int = lst->us_c;
conv_octal.c:	else if (lst->j == 1)
conv_octal.c:		lst->l_int = va_arg(ap, intmax_t);
conv_octal.c:		lst->usll_int = lst->l_int;
conv_octal.c:	else if (lst->z == 1)
conv_octal.c:		lst->size_t_i = va_arg(ap, size_t);
conv_octal.c:		lst->usll_int = lst->size_t_i;
conv_octal.c:		lst->us_int = va_arg(ap, int);
conv_octal.c:		lst->usll_int = lst->us_int;
conv_octal.c:	if (lst->h == 1)
conv_octal.c:		lst->uss_int = va_arg(ap, int);
conv_octal.c:		lst->usll_int = lst->uss_int;
conv_octal.c:	if (lst->diez == 1 && lst->usll_int > 0)
conv_octal.c:		lst->str_nb = ft_strjoin("0", ft_itoa_base_unsigned(lst->usll_int, 8));
conv_octal.c:		lst->str_nb = ft_itoa_base_unsigned(lst->usll_int, 8);
conv_octal.c:	lst->len_str_conv = ft_strlen(lst->str_nb);
conv_octal.c:	if (lst->long_preci > lst->len_str_conv)
conv_octal.c:		lst->len_str_conv = lst->long_preci;
conv_octal.c:	lst->len_str = lst->len_str_conv;
conv_octal.c:	if (lst->long_opt > lst->len_str)
conv_octal.c:		lst->len_str = lst->long_opt;
conv_octal.c:	lst->str = ft_strnew(lst->len_str);
conv_octal.c:	if (lst->less == 1)
conv_octal.c:	lst->str = ft_strdup(lst->str_nb);
conv_octal.c:	lst->len_str_conv = (int)ft_strlen(lst->str);
conv_percent.c:	lst->len_str_conv = 1;
conv_percent.c:	if (lst->long_opt > lst->len_str_conv)
conv_percent.c:		lst->len_str_conv = lst->long_opt;
conv_percent.c:	lst->str = ft_strnew(lst->len_str_conv);
conv_percent.c:	if (lst->less == 1)
conv_percent.c:		lst->str[i++] = '%';
conv_percent.c:		while (i < lst->len_str_conv)
conv_percent.c:			lst->str[i++] = ' ';
conv_percent.c:	else if (lst->zero == 1)
conv_percent.c:		while (i < lst->len_str_conv - 1)
conv_percent.c:			lst->str[i++] = '0';
conv_percent.c:		lst->str[lst->len_str_conv - 1] = '%';
conv_percent.c:		while (i < lst->len_str_conv - 1)
conv_percent.c:			lst->str[i++] = ' ';
conv_percent.c:		lst->str[lst->len_str_conv - 1] = '%';
conv_string.c:		lst->str[(*j)++] = uni;
conv_string.c:		lst->str[(*j)++] = ft_btoi(tmp);
conv_string.c:		lst->str[(*j) + 1] = 0;
conv_string.c:	k = lst->long_preci;
conv_string.c:	if (!(lst->uni_str = va_arg(ap, wchar_t *)))
conv_string.c:		lst->str = ft_strdup("(null)");
conv_string.c:	lst->str = ft_strnew((int)ft_strlen((char *)lst->uni_str) * 5 + 1);
conv_string.c:	while (lst->uni_str[i])
conv_string.c:		if ((k -= get_utf8_size(lst->uni_str[i])) < 0 && lst->long_preci > 0)
conv_string.c:		tmp = conv_ws(lst, lst->uni_str[i++], &j);
conv_string.c:	if (lst->l == 1)
conv_string.c:		lst->str = tmp;
conv_string.c:	if (lst->str == NULL)
conv_string.c:		lst->str = ft_strdup("(null)");
conv_string.c:	lst->len_str_conv = (int)ft_strlen(lst->str);
conv_uint.c:	lst->us_int = va_arg(ap, unsigned int);
conv_uint.c:	lst->str_nb = ft_itoa_long(lst->us_int);
conv_uint.c:	lst->len_str_conv = ft_strlen(lst->str_nb);
conv_uint.c:	lst->usl_int = va_arg(ap, unsigned long long);
conv_uint.c:	lst->str_nb = ft_itoa_ulong(lst->usl_int);
conv_uint.c:	lst->len_str_conv = ft_strlen(lst->str_nb);
conv_uint.c:	lst->us_c = va_arg(ap, unsigned int);
conv_uint.c:	lst->str_nb = ft_itoa_long(lst->us_c);
conv_uint.c:	lst->len_str_conv = ft_strlen(lst->str_nb);
conv_uint.c:	lst->uss_int = va_arg(ap, unsigned int);
conv_uint.c:	lst->str_nb = ft_itoa_long(lst->uss_int);
conv_uint.c:	lst->len_str_conv = ft_strlen(lst->str_nb);
conv_uint.c:	if (lst->l == 1 || lst->ll == 1 || lst->j == 1 || lst->z == 1)
conv_uint.c:	else if (lst->h == 1)
conv_uint.c:	else if (lst->hh == 1)
conv_uint.c:	if (lst->plus == 1)
conv_uint.c:		lst->plus = 0;
conv_uint.c:	if (lst->space == 1)
conv_uint.c:		lst->space = 0;
conv_uint.c:	if (lst->apostrophe == 1 && lc->thousands_sep[0])
conv_uint.c:		lst->len_str_conv = ft_strlen(lst->str_nb);
convert_int.c:	lst->len_str = (int)ft_strlen(lst->str_nb);
convert_int.c:	if (lst->len_str < lst->long_opt)
convert_int.c:		lst->len_str = lst->long_opt;
convert_int.c:	if (lst->len_str < lst->long_preci)
convert_int.c:		lst->len_str = lst->long_preci;
convert_int.c:	lst->str = ft_strnew(lst->len_str + 1);
convert_int.c:	lst->i = va_arg(ap, int);
convert_int.c:	nb = lst->i;
convert_int.c:	if (lst->i < 0)
convert_int.c:		lst->neg = 1;
convert_int.c:		nb = (long long)(lst->i) * -1;
convert_int.c:	lst->str_nb = ft_itoa_long(nb);
convert_int.c:	lst->len_str_conv = ft_strlen(lst->str_nb);
convert_int.c:	i = lst->len_str_conv / 3;
convert_int.c:	if (lst->len_str_conv % 3 == 0)
convert_int.c:	tmp = ft_strnew(lst->len_str_conv + i);
convert_int.c:	i += lst->len_str_conv;
convert_int.c:	j = lst->len_str_conv;
convert_int.c:		tmp[i--] = lst->str_nb[j--];
convert_int.c:	lst->str_nb = ft_strdup(tmp);
convert_int.c:	if (lst->z == 1)
convert_int.c:	else if (lst->j == 1)
convert_int.c:	else if (lst->l == 1 || lst->ll == 1)
convert_int.c:	else if (lst->hh == 1)
convert_int.c:	else if (lst->h == 1)
convert_int.c:	if (lst->apostrophe == 1 && lc->thousands_sep[0])
convert_int.c:		lst->len_str_conv = ft_strlen(lst->str_nb);
convert_int_next.c:	lst->s_int = va_arg(ap, int);
convert_int_next.c:	nb = lst->s_int;
convert_int_next.c:	if (lst->s_int < 0)
convert_int_next.c:		lst->neg = 1;
convert_int_next.c:		nb = (long long)(lst->s_int) * -1;
convert_int_next.c:	lst->str_nb = ft_itoa_long(nb);
convert_int_next.c:	lst->len_str_conv = ft_strlen(lst->str_nb);
convert_int_next.c:	lst->c = va_arg(ap, int);
convert_int_next.c:	nb = (int)lst->c;
convert_int_next.c:	if ((int)lst->c < 0)
convert_int_next.c:		lst->neg = 1;
convert_int_next.c:		nb = (long long)(lst->c) * -1;
convert_int_next.c:	lst->str_nb = ft_itoa_long(nb);
convert_int_next.c:	lst->len_str_conv = ft_strlen(lst->str_nb);
convert_int_next.c:	lst->l_int = va_arg(ap, long);
convert_int_next.c:	nb = lst->l_int;
convert_int_next.c:		lst->str_nb = ft_strdup("9223372036854775808");
convert_int_next.c:		lst->neg = 1;
convert_int_next.c:		if (lst->l_int < 0)
convert_int_next.c:			lst->neg = 1;
convert_int_next.c:			nb = (long long)(lst->l_int) * -1;
convert_int_next.c:		lst->str_nb = ft_itoa_long(nb);
convert_int_next.c:	lst->len_str_conv = ft_strlen(lst->str_nb);
convert_int_next.c:	lst->l_int = va_arg(ap, intmax_t);
convert_int_next.c:	nb = lst->l_int;
convert_int_next.c:	if (lst->l_int < -9223372036854775807)
convert_int_next.c:		lst->str_nb = ft_strdup("9223372036854775808");
convert_int_next.c:		lst->neg = 1;
convert_int_next.c:		if (lst->l_int < 0)
convert_int_next.c:			lst->neg = 1;
convert_int_next.c:			nb = (long long)(lst->l_int) * -1;
convert_int_next.c:		lst->str_nb = ft_itoa_long(nb);
convert_int_next.c:	lst->len_str_conv = ft_strlen(lst->str_nb);
convert_int_next.c:	lst->size_t_i = va_arg(ap, size_t);
convert_int_next.c:	lst->str_nb = ft_itoa_long(lst->size_t_i);
convert_int_next.c:	lst->len_str_conv = ft_strlen(lst->str_nb);
core.c:	if (lst->fmt[c] == '%')
core.c:		lst->conv = ft_strdup("%");
core.c:	while (comp[ci] && lst->fmt[c])
core.c:		if (lst->fmt[c] == comp[ci])
core.c:	lst->conv = ft_strsub(lst->fmt, ind, c - ind + 1);
core.c:	while (lst->fmt[c])
core.c:		if (lst->fmt[c] == '%')
core.c:			lst->ind_cut = c;
core.c:			ft_strdel(&lst->conv);
core.c:	lst->len_ret += diff;
field_int.c:	if (lst->len_str <= lst->len_str_conv &&
field_int.c:			(lst->neg == 1 || lst->space == 1 || lst->plus == 1))
field_int.c:		lst->len_str++;
field_int.c:	if (lst->zero == 1)
field_int.c:	else if (lst->space == 1)
field_int.c:	else if (lst->less == 1)
field_int.c:	else if (lst->plus == 1)
field_int.c:	lst->len_str_conv = ft_strlen(lst->str);
field_int_next.c:	if (lst->neg == 1)
field_int_next.c:		lst->str[i++] = '-';
field_int_next.c:	else if (lst->plus == 1)
field_int_next.c:		lst->str[i++] = '+';
field_int_next.c:	else if (lst->space == 1)
field_int_next.c:		lst->str[i++] = ' ';
field_int_next.c:	while (lst->str_nb[j])
field_int_next.c:		lst->str[i++] = lst->str_nb[j++];
field_int_next.c:	while (i < lst->len_str)
field_int_next.c:		lst->str[i++] = ' ';
field_int_next.c:	i = lst->len_str - 1;
field_int_next.c:	j = lst->len_str_conv - 1;
field_int_next.c:	if (lst->long_preci == 0 && lst->str_nb[0] == 0)
field_int_next.c:		lst->str[i--] = lst->str_nb[j--];
field_int_next.c:	if (lst->neg == 1)
field_int_next.c:		lst->str[i--] = '-';
field_int_next.c:		lst->str[i--] = '+';
field_int_next.c:		lst->str[i--] = ' ';
field_int_next.c:	i = lst->len_str - 1;
field_int_next.c:	j = lst->len_str_conv - 1;
field_int_next.c:	if (lst->long_preci == 0 && lst->str_nb[0] == 0)
field_int_next.c:		lst->str[i--] = lst->str_nb[j--];
field_int_next.c:	if (lst->neg == 1 && lst->long_preci != -1)
field_int_next.c:		lst->str[i--] = '-';
field_int_next.c:	while (i >= 0 && lst->long_preci > -1)
field_int_next.c:		lst->str[i--] = ' ';
field_int_next.c:	while (i >= 0 && lst->long_preci == -1)
field_int_next.c:		lst->str[i--] = '0';
field_int_next.c:	if (lst->long_preci == -1 && lst->neg == 1)
field_int_next.c:		lst->str[0] = '-';
field_int_next.c:	else if (lst->plus == 1)
field_int_next.c:		lst->str[0] = '+';
field_int_next.c:	else if (lst->space == 1)
field_int_next.c:		lst->str[0] = ' ';
field_int_next.c:	i = lst->len_str - 1;
field_int_next.c:	j = lst->len_str_conv - 1;
field_int_next.c:	if (lst->long_preci == 0 && lst->str_nb[0] == 0)
field_int_next.c:		lst->str[i--] = lst->str_nb[j--];
field_int_next.c:	if (lst->neg == 1)
field_int_next.c:		lst->str[i--] = '-';
field_int_next.c:		lst->str[i--] = ' ';
field_int_next.c:		lst->str[i--] = ' ';
field_int_next.c:	i = lst->len_str - 1;
field_int_next.c:	j = lst->len_str_conv - 1;
field_int_next.c:	if (lst->long_preci == 0 && lst->str_nb[0] == 0 && lst->long_opt != 0)
field_int_next.c:		lst->str[i--] = lst->str_nb[j--];
field_int_next.c:	if (lst->neg == 1)
field_int_next.c:		lst->str[i--] = '-';
field_int_next.c:		lst->str[i--] = ' ';
field_string.c:		if (lst->str[is] != '\0')
field_string.c:			str[i++] = lst->str[is++];
field_string.c:	lst->str = str;
field_string.c:		if (i >= (lenght - (int)ft_strlen(lst->str)))
field_string.c:			str[i++] = lst->str[is++];
field_string.c:	lst->str = str;
field_string.c:		if (i >= (lenght - (int)ft_strlen(lst->str)))
field_string.c:			str[i++] = lst->str[is++];
field_string.c:	lst->str = str;
field_string.c:	lenght = lst->long_opt;
field_string.c:	if (lenght < (int)ft_strlen(lst->str))
field_string.c:		lenght = (int)ft_strlen(lst->str);
field_string.c:	if (lst->less == 1)
field_string.c:	else if (lst->zero == 1)
field_string.c:	lst->len_str_conv = (int)ft_strlen(lst->str);
ft_printf.c:	lst->ind_cut = 0;
ft_printf.c:	lst->len_ret = 0;
ft_printf.c:	ft_putnstr(lst->fmt, lst->len_ret);
ft_printf.c:	ft_strdel(&lst->conv);
ft_printf.c://	free(lst->fmt);
ft_printf.c:	if (lst->bool_star == 1)
ft_printf.c:	return (lst->len_ret);
ft_printf.c:	lst->ind_cut = 0;
ft_printf.c:	lst->len_ret = 0;
ft_printf.c:	*str = ft_strdup(lst->fmt);
ft_printf.c://	free(lst->fmt);
ft_printf.c:	return (lst->len_ret);
ft_printf.c:	lst->ind_cut = 0;
ft_printf.c:	lst->len_ret = 0;
ft_printf.c:	write(fd, lst->fmt, lst->len_ret);
ft_printf.c://	free(lst->fmt);
ft_printf.c:	return (lst->len_ret);
preci_int.c:	if (lst->long_preci > lst->len_str_conv)
preci_int.c:		tmp = ft_strnew(lst->long_preci);
preci_int.c:		while (i < lst->long_preci)
preci_int.c:			if (i < (lst->long_preci - lst->len_str_conv))
preci_int.c:				tmp[i++] = lst->str_nb[j++];
preci_int.c:		lst->str_nb = tmp;
preci_int.c:		lst->len_str_conv = ft_strlen(lst->str_nb);
preci_int.c:	if (lst->long_preci > lst->len_str_conv)
preci_int.c:		tmp = ft_strnew(lst->long_preci);
preci_int.c:		while (i < lst->long_preci + 1)
preci_int.c:			if (i < ((lst->long_preci) - lst->len_str_conv))
preci_int.c:				tmp[i++] = lst->str_nb[j++];
preci_int.c:		lst->str_nb = tmp;
preci_int.c:		lst->len_str_conv = ft_strlen(lst->str_nb);
preci_int.c:	if (lst->long_preci == -1)
preci_int.c:	if (lst->str_nb[0] == '0' && lst->long_preci == 0)
preci_int.c:		lst->str_nb = ft_strnew(0);
preci_int.c:	else if (lst->neg == 1)
preci_string.c:	if (lst->long_preci == -1)
preci_string.c:	str = ft_strnew(lst->long_preci + 1);
preci_string.c:	while (i < lst->long_preci)
preci_string.c:		str[i] = lst->str[i];
preci_string.c:	lst->str = str;
recup_args_hexa.c:	if (lst->h == 1)
recup_args_hexa.c:		lst->uss_int = va_arg(ap, int);
recup_args_hexa.c:		lst->l_hexa = lst->uss_int;
recup_args_hexa.c:	else if (lst->hh == 1)
recup_args_hexa.c:		lst->us_c = va_arg(ap, int);
recup_args_hexa.c:		lst->l_hexa = lst->us_c;
recup_args_hexa.c:	else if (lst->l == 1 | lst->ll == 1 || lst->j == 1 || lst->z == 1)
recup_args_hexa.c:		lst->usll_int = va_arg(ap, unsigned long long);
recup_args_hexa.c:		lst->l_hexa = lst->usll_int;
recup_args_hexa.c:		lst->us_int = va_arg(ap, unsigned int);
recup_args_hexa.c:		lst->l_hexa = lst->us_int;
recup_args_hexa.c:		lst->str_nb = ft_itoa_base_maj_unsigned(lst->l_hexa, 16);
recup_args_hexa.c:		lst->str_nb = ft_itoa_base_unsigned(lst->l_hexa, 16);
recup_format.c:	if (lst->conv[i] == '+')
recup_format.c:		lst->plus = 1;
recup_format.c:	if (lst->conv[i] == '-')
recup_format.c:		lst->less = 1;
recup_format.c:	if (lst->conv[i] == '#')
recup_format.c:		lst->diez = 1;
recup_format.c:	if (lst->conv[i] == '0' &&
recup_format.c:			!(lst->conv[i - 1] > '0' && lst->conv[i - 1] <= '9'))
recup_format.c:		lst->zero = 1;
recup_format.c:	if (lst->conv[i] == ' ')
recup_format.c:		lst->space = 1;
recup_format.c:	if (lst->conv[i] == '\'')
recup_format.c:		lst->apostrophe = 1;
recup_format.c:	if (lst->plus == 1 && lst->space == 1)
recup_format.c:		lst->space = 0;
recup_format.c:	if (lst->less == 1 && lst->zero == 1)
recup_format.c:		lst->zero = 0;
recup_format.c:	lst->long_opt = ((int)lst->conv[(*i)++] - 48);
recup_format.c:	while (lst->conv[(*i)] >= 48 && lst->conv[(*i)] <= 57)
recup_format.c:		lst->long_opt *= 10;
recup_format.c:		lst->long_opt += ((int)lst->conv[(*i)++] - 48);
recup_format.c:	if (lst->long_preci == -1)
recup_format.c:		lst->long_preci++;
recup_format.c:	while (lst->conv[(*i)] >= 48 && lst->conv[(*i)] <= 57)
recup_format.c:		tmp += ((int)lst->conv[(*i)++] - 48);
recup_format.c:	if (lst->bool_star == 1 && lst->long_preci < tmp)
recup_format.c:		lst->long_preci = tmp;
recup_format.c:	else if (lst->bool_star == 0)
recup_format.c:		lst->long_preci = tmp;
recup_format.c:	if (lst->conv[*i] == 'h' && lst->conv[*i + 1] == 'h')
recup_format.c:		lst->hh = 1;
recup_format.c:	else if (lst->conv[*i] == 'h')
recup_format.c:		lst->h = 1;
recup_format.c:	else if (lst->conv[*i] == 'l' && lst->conv[*i + 1] == 'l')
recup_format.c:		lst->ll = 1;
recup_format.c:	else if (lst->conv[*i] == 'l')
recup_format.c:		lst->l = 1;
recup_format.c:	else if (lst->conv[*i] == 'j')
recup_format.c:		lst->j = 1;
recup_format.c:	else if (lst->conv[*i] == 'z')
recup_format.c:		lst->z = 1;
recup_format.c:	while (lst->conv[i])
recup_format.c:		if (lst->conv[i] > 48 && lst->conv[i] < 58 && lst->long_preci == -1)
recup_format.c:		if (lst->conv[i] == '-' || lst->conv[i] == '+' || lst->conv[i] == '#'
recup_format.c:				|| lst->conv[i] == '0' || lst->conv[i] == ' ' ||
recup_format.c:				lst->conv[i] == '\'')
recup_format.c:		if (lst->conv[i] > 48 && lst->conv[i] < 58 && lst->long_preci == -1)
recup_format.c:		if (lst->conv[i] == '.')
recup_format.c:		if (lst->conv[i] == 'h' || lst->conv[i] == 'l' || lst->conv[i] == 'j' ||
recup_format.c:				lst->conv[i] == 'z')
set_lst.c:	lst->long_preci = -1;
set_lst.c:	lst->neg = 0;
set_lst.c:	lst->str = NULL;
set_lst.c:	lst->len_str = 0;
set_lst.c:	lst->conv = NULL;
set_lst.c:	lst->tab = NULL;
set_lst.c:	lst->s_str = NULL;
set_lst.c:	lst->s_c = 0;
set_lst.c:	lst->us_str = NULL;
set_lst.c:	lst->us_c = 0;
set_lst.c:	lst->l_hexa = 0;
set_lst.c:	lst->i = 0;
set_lst.c:	lst->usl_int = 0;
set_lst.c:	lst->uni_str = NULL;
set_lst.c:	lst->uni_c = 0;
set_lst.c:	lst->conv_c = 0;
set_lst.c:	lst->bool_star = 0;
set_lst.c:	lst->apostrophe = 0;
set_lst.c:	lst->h = 0;
set_lst.c:	lst->hh = 0;
set_lst.c:	lst->l = 0;
set_lst.c:	lst->ll = 0;
set_lst.c:	lst->j = 0;
set_lst.c:	lst->z = 0;
set_lst.c:	lst->plus = 0;
set_lst.c:	lst->less = 0;
set_lst.c:	lst->diez = 0;
set_lst.c:	lst->zero = 0;
set_lst.c:	lst->space = 0;
set_lst.c:	lst->got_opt = 0;
set_lst.c:	lst->long_opt = 0;
set_lst.c:	lst->c = 0;
set_lst.c:	lst->s_int = 0;
set_lst.c:	lst->uss_int = 0;
set_lst.c:	lst->us_int = 0;
set_lst.c:	lst->us_c = 0;
set_lst.c:	lst->usll_int = 0;
set_lst.c:	lst->l_int = 0;
set_lst.c:	lst->size_t_i = 0;
set_lst.c:	lst->str_nb = NULL;
set_lst.c:	lst->len_str_conv = 0;
spc_flags.c:	if (lst->conv[(*i)] == '*')
spc_flags.c:		lst->bool_star = 1;
spc_flags.c:		if (i > 0 && lst->conv[(*i) - 1] == '.')
spc_flags.c:			lst->long_preci = va_arg(ap, int);
spc_flags.c:			if (lst->long_preci < 0)
spc_flags.c:				lst->long_preci = -1;
spc_flags.c:			lst->long_opt = va_arg(ap, int);
spc_flags.c:			if (lst->long_opt < 0)
spc_flags.c:				lst->long_opt *= -1;
spc_flags.c:				lst->less = 1;
verif_format.c:	if (lst->conv[pos] == 'C')
verif_format.c:		lst->l = 1;
verif_format.c:	else if (lst->conv[pos] == 'b')
verif_format.c:	else if (lst->conv[pos] == '%')
verif_format.c:	else if ((!ft_strchr(" +#0-lhjz", lst->conv[pos])) || lst->long_opt > 0)
verif_format.c:		conv_empty(lst, lst->conv[pos]);
verif_format.c:		lst->str = ft_strnew(0);
verif_format.c:	if (lst->conv[pos] == 'u')
verif_format.c:	else if (lst->conv[pos] == 'x')
verif_format.c:	else if (lst->conv[pos] == 's')
verif_format.c:	else if (lst->conv[pos] == 'c')
verif_format.c:	if (lst->conv[pos] == 'D')
verif_format.c:		lst->l = 1;
verif_format.c:	else if (lst->conv[pos] == 'o')
verif_format.c:	else if (lst->conv[pos] == 'U')
verif_format.c:		lst->l = 1;
verif_format.c:	else if (lst->conv[pos] == 'O')
verif_format.c:		lst->l = 1;
verif_format.c:	if (lst->conv[pos] == 'X')
verif_format.c:		if (lst->str[1] == 'x')
verif_format.c:			lst->str[1] = 'X';
verif_format.c:	else if (lst->conv[pos] == 'S')
verif_format.c:		lst->l = 1;
verif_format.c:	else if (lst->conv[pos] == 'p')
verif_format.c:	else if (lst->conv[pos] == 'd' || lst->conv[pos] == 'i')
verif_format.c:	pos = ft_strlen(lst->conv) - 1;
verif_format.c:	return (ft_strlen(lst->conv));
